package TVIS;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Objects;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author user
 * Model number: Unique id for the television model [String]
 * Model name: Name of the television model [String]
 * Brand: Name of the company or brand [String]
 * Price: Price of the TV [Float]
 * Size: Size of the TV in inches [Float]
 * Resolution: Pixel resolution of the screen [String]
 * Warranty: Warranty in months [Integer]
 */
public class TVFrame extends javax.swing.JFrame {
    
    DefaultTableModel model;
    String columns[] = {"Model No.","Model name","Brand","Price","Size","Resolution","Warranty","Features"};
    JCheckBox[] featureList;
    // Used when sorting
    ArrayList<Object[]> sortedData = null;
    int sortCol = -1;

    /** Creates new form TVFrame */
    public TVFrame() {
        Object[][] data = {};
        model = new DefaultTableModel(data, columns){
            @Override
            // Makes cells uneditable
            public boolean isCellEditable(int row, int column) {
               return false;
            }            
            @Override
            // Sets column data types
            public Class getColumnClass(int column) {
                switch (column) {
                    case 3: // Price
                    case 4: // Size
                        return Float.class;
                    default:
                        return String.class;
                }
            }
        };        
        initComponents();
        setGUIParameters();
        try {
            callFile("src/TVIS/doc/inventory.csv", false);
        } catch(IOException e){
            Logger.error("Error loading file");
        }
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        searchDialog.pack();
        searchDialog.setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resolutionBG = new javax.swing.ButtonGroup();
        searchDialog = new javax.swing.JDialog();
        searchPanel = new javax.swing.JPanel();
        btnSearchDialog = new javax.swing.JButton();
        btnCancelDialog = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        cbSearch = new javax.swing.JComboBox<>();
        txtSearchValue = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnSearchDialog1 = new javax.swing.JButton();
        panelBG = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        invTable = new javax.swing.JTable();
        btnSearch = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        panelInput = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtModelNo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtModelName = new javax.swing.JTextField();
        txtBrand = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        txtWarranty = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtSize = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtOtherRes = new javax.swing.JTextField();
        panelFeatures = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        featureHDR = new javax.swing.JCheckBox();
        featureSmart = new javax.swing.JCheckBox();
        featureWifi = new javax.swing.JCheckBox();
        featureBluetooth = new javax.swing.JCheckBox();
        featureGame = new javax.swing.JCheckBox();
        featureCasting = new javax.swing.JCheckBox();
        res2k = new javax.swing.JRadioButton();
        res4k = new javax.swing.JRadioButton();
        resOther = new javax.swing.JRadioButton();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jPanelHeader = new javax.swing.JPanel();
        labelHeader = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuOpen = new javax.swing.JMenuItem();
        menuExport = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuHelp = new javax.swing.JMenuItem();
        menuAbout = new javax.swing.JMenuItem();

        searchDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        searchDialog.setTitle("Search");
        searchDialog.setAlwaysOnTop(true);
        searchDialog.setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        searchDialog.setResizable(false);

        searchPanel.setBackground(new java.awt.Color(236, 218, 243));
        searchPanel.setMinimumSize(new java.awt.Dimension(464, 258));

        btnSearchDialog.setText("Search");
        btnSearchDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDialogActionPerformed(evt);
            }
        });

        btnCancelDialog.setText("Cancel");
        btnCancelDialog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelDialogActionPerformed(evt);
            }
        });

        cbSearch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Model name", "Brand", "Price", "Size" }));

        txtSearchValue.setToolTipText("Range Low");

        jLabel10.setText("Type");

        jLabel11.setText("Value");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearchValue)
                    .addComponent(cbSearch, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSearchDialog1.setText("Clear");
        btnSearchDialog1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDialog1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, searchPanelLayout.createSequentialGroup()
                        .addComponent(btnSearchDialog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearchDialog1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancelDialog)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchDialog)
                    .addComponent(btnCancelDialog)
                    .addComponent(btnSearchDialog1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout searchDialogLayout = new javax.swing.GroupLayout(searchDialog.getContentPane());
        searchDialog.getContentPane().setLayout(searchDialogLayout);
        searchDialogLayout.setHorizontalGroup(
            searchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 230, Short.MAX_VALUE)
        );
        searchDialogLayout.setVerticalGroup(
            searchDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Kathmandu Televisions Inventory");
        setResizable(false);

        panelBG.setBackground(new java.awt.Color(255, 255, 204));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel9.setFont(jLabel9.getFont().deriveFont(jLabel9.getFont().getStyle() | java.awt.Font.BOLD, jLabel9.getFont().getSize()+4));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Inventory");

        invTable.setModel(model);
        invTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(invTable);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(154, 154, 154)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch)
                    .addComponent(btnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelInput.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Model Number");

        jLabel2.setText("Model Name");

        jLabel3.setText("Brand");

        jLabel4.setText("Price (NPR)");

        jLabel5.setText("Warranty (Months)");
        jLabel5.setToolTipText("");

        jLabel6.setText("Size (in Inches)");

        jLabel7.setText("Resolution");

        panelFeatures.setBackground(new java.awt.Color(216, 250, 255));
        panelFeatures.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 255, 204)));

        jLabel8.setFont(jLabel8.getFont().deriveFont(jLabel8.getFont().getStyle() | java.awt.Font.BOLD, jLabel8.getFont().getSize()+2));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Features");

        featureHDR.setBackground(new java.awt.Color(216, 250, 255));
        featureHDR.setText("HDR");

        featureSmart.setBackground(new java.awt.Color(216, 250, 255));
        featureSmart.setText("Smart TV");

        featureWifi.setBackground(new java.awt.Color(216, 250, 255));
        featureWifi.setText("WIFI");

        featureBluetooth.setBackground(new java.awt.Color(216, 250, 255));
        featureBluetooth.setText("Bluetooth");

        featureGame.setBackground(new java.awt.Color(216, 250, 255));
        featureGame.setText("Gaming");

        featureCasting.setBackground(new java.awt.Color(216, 250, 255));
        featureCasting.setText("Inbuilt Casting");

        javax.swing.GroupLayout panelFeaturesLayout = new javax.swing.GroupLayout(panelFeatures);
        panelFeatures.setLayout(panelFeaturesLayout);
        panelFeaturesLayout.setHorizontalGroup(
            panelFeaturesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFeaturesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFeaturesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelFeaturesLayout.createSequentialGroup()
                        .addComponent(featureSmart, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(featureHDR, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(featureWifi, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(featureGame, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(featureBluetooth, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(featureCasting, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 180, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelFeaturesLayout.setVerticalGroup(
            panelFeaturesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFeaturesLayout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelFeaturesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(featureSmart)
                    .addComponent(featureHDR)
                    .addComponent(featureWifi)
                    .addComponent(featureGame)
                    .addComponent(featureBluetooth)
                    .addComponent(featureCasting))
                .addContainerGap())
        );

        resolutionBG.add(res2k);
        res2k.setSelected(true);
        res2k.setText("2K");
        res2k.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                res2kStateChanged(evt);
            }
        });

        resolutionBG.add(res4k);
        res4k.setText("4K");
        res4k.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                res4kStateChanged(evt);
            }
        });

        resolutionBG.add(resOther);
        resOther.setText("Other");
        resOther.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                resOtherStateChanged(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelInputLayout = new javax.swing.GroupLayout(panelInput);
        panelInput.setLayout(panelInputLayout);
        panelInputLayout.setHorizontalGroup(
            panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelFeatures, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelInputLayout.createSequentialGroup()
                        .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelInputLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtModelNo))
                            .addGroup(panelInputLayout.createSequentialGroup()
                                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(20, 20, 20)
                                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPrice)
                                    .addComponent(txtBrand)
                                    .addComponent(txtModelName))))
                        .addGap(99, 99, 99)
                        .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(panelInputLayout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                                .addComponent(res2k)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(res4k)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(resOther)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(panelInputLayout.createSequentialGroup()
                                        .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtOtherRes)))
                            .addGroup(panelInputLayout.createSequentialGroup()
                                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(29, 29, 29)
                                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtWarranty, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                                    .addComponent(txtSize))))))
                .addContainerGap())
        );
        panelInputLayout.setVerticalGroup(
            panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInputLayout.createSequentialGroup()
                        .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtModelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelInputLayout.createSequentialGroup()
                        .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtWarranty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(res2k)
                                .addComponent(txtOtherRes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))
                            .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(res4k)
                                .addComponent(resOther)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdd)
                        .addComponent(btnClear)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelFeatures, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanelHeader.setBackground(new java.awt.Color(255, 255, 178));

        labelHeader.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        labelHeader.setText("Kathmandu Television Information System");

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/TVIS/KTv.png"))); // NOI18N

        javax.swing.GroupLayout jPanelHeaderLayout = new javax.swing.GroupLayout(jPanelHeader);
        jPanelHeader.setLayout(jPanelHeaderLayout);
        jPanelHeaderLayout.setHorizontalGroup(
            jPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHeaderLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 784, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanelHeaderLayout.setVerticalGroup(
            jPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelBGLayout = new javax.swing.GroupLayout(panelBG);
        panelBG.setLayout(panelBGLayout);
        panelBGLayout.setHorizontalGroup(
            panelBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelBGLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelInput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelBGLayout.setVerticalGroup(
            panelBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBGLayout.createSequentialGroup()
                .addComponent(jPanelHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        menuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuOpen.setText("Import CSV");
        menuOpen.setToolTipText("Open pre-existing data from a .csv file");
        menuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(menuOpen);

        menuExport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuExport.setText("Export CSV");
        menuExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExportActionPerformed(evt);
            }
        });
        jMenu1.add(menuExport);
        jMenu1.add(jSeparator1);

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        menuExit.setText("Exit");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        menuHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        menuHelp.setText("Help");
        menuHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuHelpActionPerformed(evt);
            }
        });
        jMenu2.add(menuHelp);

        menuAbout.setText("About");
        menuAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAboutActionPerformed(evt);
            }
        });
        jMenu2.add(menuAbout);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBG, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuOpenActionPerformed
        try {
            importFile();
        } 
        catch(ArithmeticException e){
            Logger.error("Invalid File type"); 
        }
        catch(java.io.FileNotFoundException e){
            Logger.error("File not found");            
        }
        catch(IOException e) {
            System.out.println(e.toString());
            Logger.error("Error reading from file");
        }
    }//GEN-LAST:event_menuOpenActionPerformed

    private void menuExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExportActionPerformed
        try {
            exportFile();
        } 
        catch(IOException e) {
            System.out.println(e.getMessage());
            Logger.error("Error writing to file");
        }
    }//GEN-LAST:event_menuExportActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        Logger.close();
    }//GEN-LAST:event_menuExitActionPerformed

    private void menuAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAboutActionPerformed
        aboutMenu();
    }//GEN-LAST:event_menuAboutActionPerformed

    private void menuHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuHelpActionPerformed
        helpMenu();
    }//GEN-LAST:event_menuHelpActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchWindow();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void res2kStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_res2kStateChanged
        selectResolution();
    }//GEN-LAST:event_res2kStateChanged

    private void res4kStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_res4kStateChanged
        selectResolution();
    }//GEN-LAST:event_res4kStateChanged

    private void resOtherStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_resOtherStateChanged
        selectResolution();
    }//GEN-LAST:event_resOtherStateChanged

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        addNew();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        if(JOptionPane.showConfirmDialog(null, "Clear all fields?", "Clear", JOptionPane.YES_NO_OPTION) == 0)  clearFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        try {
            deleteRow(invTable.convertRowIndexToModel(invTable.getSelectedRow()));
        } catch(Exception e){
            Logger.error("No record selected");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void invTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invTableMouseClicked
        // Souble click
        if (evt.getClickCount() == 2) {
            showRowInfo(invTable.convertRowIndexToModel(invTable.getSelectedRow()));
        }
    }//GEN-LAST:event_invTableMouseClicked

    private void btnSearchDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDialogActionPerformed
        searchItem();
    }//GEN-LAST:event_btnSearchDialogActionPerformed

    private void btnCancelDialogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelDialogActionPerformed
        closeSearch();
    }//GEN-LAST:event_btnCancelDialogActionPerformed

    private void btnSearchDialog1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDialog1ActionPerformed
        clearDialogFields();
    }//GEN-LAST:event_btnSearchDialog1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        // Set System look and feel
        try{
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());

        }
        catch(ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException e){
            System.out.println("Class not found");
        }
        
        /* Set Close method */
        java.awt.EventQueue.invokeLater(() -> {
            new TVFrame().addWindowListener(new WindowAdapter()
            {
                @Override
                public void windowClosing(WindowEvent e)
                {
                    Logger.close();
                }
            });
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancelDialog;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearchDialog;
    private javax.swing.JButton btnSearchDialog1;
    private javax.swing.JComboBox<String> cbSearch;
    private javax.swing.JCheckBox featureBluetooth;
    private javax.swing.JCheckBox featureCasting;
    private javax.swing.JCheckBox featureGame;
    private javax.swing.JCheckBox featureHDR;
    private javax.swing.JCheckBox featureSmart;
    private javax.swing.JCheckBox featureWifi;
    private javax.swing.JTable invTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanelHeader;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel labelHeader;
    private javax.swing.JMenuItem menuAbout;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuExport;
    private javax.swing.JMenuItem menuHelp;
    private javax.swing.JMenuItem menuOpen;
    private javax.swing.JPanel panelBG;
    private javax.swing.JPanel panelFeatures;
    private javax.swing.JPanel panelInput;
    private javax.swing.JRadioButton res2k;
    private javax.swing.JRadioButton res4k;
    private javax.swing.JRadioButton resOther;
    private javax.swing.ButtonGroup resolutionBG;
    private javax.swing.JDialog searchDialog;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtModelName;
    private javax.swing.JTextField txtModelNo;
    private javax.swing.JTextField txtOtherRes;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtSearchValue;
    private javax.swing.JTextField txtSize;
    private javax.swing.JTextField txtWarranty;
    // End of variables declaration//GEN-END:variables

    /**
     * It enables the other resolution text field
     */
    private void selectResolution() {
        txtOtherRes.setEnabled(resOther.isSelected());
    }

    /**
     * Checks the values and adds the TV to the list
     */
    private void addNew() {
        // Check if Empty
        JTextField textField[] = {txtModelNo,txtModelName,txtBrand,txtPrice,txtWarranty,txtSize};
        for(JTextField tf: textField){            
            if(tf.getText().equals("")){
                txtError(tf,"Please fill in all text fields");          
                return;
            }
        }
        
        // Check resolution
        if(resOther.isSelected() && txtOtherRes.getText().equals("")){
            txtError(txtOtherRes,"Please fill in all text fields");
            return;
        }
        
        // Get the data
        String modelNumber = txtModelNo.getText();
        String modelName = txtModelName.getText();
        String brand = txtBrand.getText();
        float size, price;
        int warranty;
        try{
            price = Float.parseFloat(txtPrice.getText());
        }
        catch(NumberFormatException e){
            txtError(txtPrice,"Please enter valid floating value");
            return;
        }
        try{            
            size = Float.parseFloat(txtSize.getText());
        }
        catch(NumberFormatException e){
            txtError(txtSize,"Please enter valid floating value");
            return;
        }
        try{
            warranty = Integer.parseInt(txtWarranty.getText());
        }
        catch(NumberFormatException e){
            txtError(txtWarranty,"Please enter valid integer value");
            return;
        }
        String resolution = getResolution();
        String features = getFeatures();

        // Add row
        Object[] row = {modelNumber, modelName, brand, price, size, resolution, warranty,features}; 
        model.addRow(row);
        Logger.info("TV data added");
        clearFields();
    }

    /**
     * Clears all the fields
     */
    private void clearFields() {
        txtModelNo.setText("");
        txtModelName.setText("");
        txtBrand.setText("");
        txtPrice.setText("");
        txtSize.setText("");
        txtWarranty.setText("");
        res2k.setSelected(true);
        txtOtherRes.setText("");
        for (JCheckBox feat: featureList){
            feat.setSelected(false);
        }
    }

    /**
     * Returns the selected resolution
     * @return Resolution
     */
    private String getResolution() {
        if(res2k.isSelected()){
            return "2K";
        } else if(res4k.isSelected()){
            return "4K";
        } else {
            return txtOtherRes.getText();
        }
    }

    /**
     * 
     * @return 
     */
    private String getFeatures() {
        String text = "";
        for(JCheckBox feat: featureList){
            if(feat.isSelected()){
                text += feat.getText() + ", ";
            }
        }
        if(text.equals("")){
            text = "N/A";
        } else {
            text = text.substring(0, text.length()-2);        
        }
        return text;
    }

    /**
     * It shows errors happening in the text field
     * @param txtField The text field component to highlight
     * @param msg The error message
     */
    private void txtError(JTextField txtField, String msg) {
        txtField.requestFocus();
        txtField.setBackground(Color.red);
        Logger.error(msg);
        txtField.setBackground(UIManager.getColor("TextField.background"));
    }

    /**
     * Sets the GUI parameters when initializing
     */
    private void setGUIParameters() {        
        txtOtherRes.setEnabled(false);
        
        // Checkbox List
        JCheckBox[] x = {featureBluetooth,featureCasting,featureGame,featureHDR,featureSmart,featureWifi};
        featureList = x;
        
        // Table dimensions
        invTable.getTableHeader().setResizingAllowed(false);
        invTable.getTableHeader().setReorderingAllowed(false);
        invTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        invTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        invTable.getColumnModel().getColumn(2).setPreferredWidth(70);
        invTable.getColumnModel().getColumn(3).setPreferredWidth(50);
        invTable.getColumnModel().getColumn(4).setPreferredWidth(50);
        invTable.getColumnModel().getColumn(5).setPreferredWidth(50);
        invTable.getColumnModel().getColumn(6).setPreferredWidth(50);
        invTable.getColumnModel().getColumn(7).setPreferredWidth(200);
        
        // Default Table Sorter
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(invTable.getModel());
        invTable.setRowSorter(sorter);        
        sorter.setSortable(5, false);
        sorter.setSortable(6, false);
        sorter.setSortable(7, false);
    }

    /**
     * Saves data in table to a file
     * @throws IOException 
     */
    private void exportFile() throws IOException {
        String filename = getFilePath();
        if(filename == null) return;
        File file = new File (filename);
        BufferedWriter bw = new BufferedWriter(new FileWriter(file));
        PrintWriter out = new PrintWriter(bw);        
        // Parsing data and writing it
        String TVInfo, temp;
        for (int i = 0; i < model.getRowCount(); i++){
            TVInfo = "";
            for (int j = 0; j < model.getColumnCount(); j++){
                temp = "" + model.getValueAt(i, j);
                TVInfo += temp.replace(",", "&com;") + ",";
            }
            out.println(TVInfo.substring(0, TVInfo.length()-1));
        }   
        //Close File
        out.close();
        Logger.info("File saved");
    }

    /**
     * Returns the file path from the file chooser
     * @return File path
     */
    private String getFilePath() {
        String path;
        JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("CSV file", "csv"));
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if(fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION )  {
            path = fc.getSelectedFile().getAbsolutePath();
            if(path.lastIndexOf(".") == -1) {
                path += ".csv";
            } 
            else if (path.lastIndexOf(".") != 0){
                if(!path.substring(path.lastIndexOf(".")+1).equals("csv")){
                    throw new ArithmeticException();
                }              
            }
            System.out.println(path);
            return path;
        }        
        return null;
    }

    /**
     * Loads data into table from a file
     * @throws IOException 
     */
    private void importFile() throws IOException{
        String filename = getFilePath();
        if(filename == null) return;
        callFile(filename, true);        
    }

    /**
     * Parses string data into the table model
     * @param record 
     */
    private void loadIntoModel(String record) {
        Object[] row = record.split(",");
        for(int i=0; i<row.length; i++){
            if (!(i == 3 || i == 4)) {
                row[i] = ((String)row[i]).replace("&com;", ",");                
            } 
        }
        model.addRow(row);
        model.setValueAt(Float.parseFloat(row[3].toString()),model.getRowCount()-1,3);
        model.setValueAt(Float.parseFloat(row[4].toString()),model.getRowCount()-1,4);     
    }

    /**
     * Deletes the selected row
     */
    private void deleteRow(int index) {
        if(JOptionPane.showConfirmDialog(null, "Are you sure?", "Delete TV", JOptionPane.YES_NO_OPTION) == 0) {
            model.removeRow(index);
            Logger.info("Record deleted");
        }
    }

    /**
     * Shows a pop up with the TV information
     * @param index 
     */
    private void showRowInfo(int index) {
        String info = "";
        for(int i=0; i<model.getColumnCount(); i++){
            info += model.getColumnName(i)+": "+model.getValueAt(index, i)+"\n";
        }
        Logger.showMsg(info, "TV Info", JOptionPane.PLAIN_MESSAGE);
    }

    /**
     * Loads model data from filename
     * @param filename
     * @throws IOException 
     */
    private void callFile(String filename) throws IOException {
        callFile(filename, false);
    }

    /**
     * Loads model data from filename
     * @param filename
     * @param msg true if message should be shown
     * @throws IOException 
     */   
    private void callFile(String filename, boolean msg) throws IOException {
        File file = new File (filename);
        BufferedReader in = new BufferedReader(new FileReader(file));
        String row;
        model.setRowCount(0);
        while ((row = in.readLine()) != null) {
            loadIntoModel(row);
        }
        in.close();
        if(msg) Logger.info("Data loaded");
    }

    /**
     * call the Search frame
     */
    private void searchWindow() {
        clearDialogFields();
        searchDialog.setVisible(true);
    }

    /**
     * Close search dialog
     */
    private void closeSearch() {
        searchDialog.dispose();
    }

    /**
     * Resets all inputs in the search dialog
     */
    private void clearDialogFields() {
        cbSearch.setSelectedIndex(0);
        txtSearchValue.setText(""); 
    }

    /**
     * Search items based on user input
     */
    private void searchItem() {   
        closeSearch();
        try{
            int resultIndex;  
            sortedData = sortArray(cbSearch.getSelectedIndex() + 1);
            sortCol = (cbSearch.getSelectedIndex() + 1);
//            testDisplaySortedArray(); return; // Shows sorted array
            Object value = txtSearchValue.getText(); 
            if(sortCol == 3 || sortCol == 4){
                resultIndex = binarySearch(Float.parseFloat(value.toString()), 0, sortedData.size()-1);
            } else {
                resultIndex = binarySearch(value.toString(), 0, sortedData.size()-1);
            }            
            if (resultIndex == -1){
                Logger.error("No result found");
            } else {
                String info = "";
                Object[] searchResult = sortedData.get(resultIndex);
                for(int i=0; i < columns.length; i++){
                    info += columns[i]+": "+searchResult[i]+"\n";
                }
                Logger.showMsg(info, "Search Result", JOptionPane.PLAIN_MESSAGE);
            }            
        }
        catch (NumberFormatException e) {
            Logger.error("Invalid search value");
        }
        finally {
            sortedData = null;
            sortCol = -1;            
        }

    }

    /**
     * Selection sorts the array based on the values in the column specified
     * @param col
     * @return 
     */
    private ArrayList<Object[]> sortArray(int col) {
        ArrayList<Object[]> tableData;
        tableData = getTableData();
        for(int i=0; i < tableData.size(); i++){
            for(int j=i+1; j < tableData.size(); j++){
                if(isLess(tableData.get(i),tableData.get(j),col)){
                    Collections.swap(tableData, i, j);
                }
            }
        }
        return tableData;
    }
    
    /**
     * Returns table data into arraylist
     * @return 
     */
    private ArrayList<Object[]> getTableData() {
        int nRow = model.getRowCount();
        int nCol = model.getColumnCount();
        ArrayList<Object[]> tableData = new ArrayList<>();
        for (int i = 0 ; i < nRow ; i++) {
            Object[] row = new Object[nCol];
            for (int j = 0 ; j < nCol ; j++) {
                row[j] = model.getValueAt(i,j);
            }
            tableData.add(row);
        }
        return tableData;
    }

    /**
     * Compares row a to row b based on the column
     * @param a
     * @param b
     * @param col
     * @return true if b less than a
     */
    private boolean isLess(Object[] a, Object[] b, int col) {
        if(col == 3 || col == 4){
            // Price or Size
            return (Float.parseFloat(a[col].toString()) < Float.parseFloat(b[col].toString()));
        }
        else {
            // Strings
            return (a[col].toString()).compareToIgnoreCase(b[col].toString()) > 0;
        }
    }
    
    /**
     * Uses binary search algorithm to find the array index of String value
     * @param value The value to find
     * @param left left most index to check
     * @param right right most index to check
     * @return index of value; -1 if not found
     */
    private int binarySearch(String value, int left, int right) {
        int mid = (left + right) / 2;
        String midVal = sortedData.get(mid)[sortCol].toString();
        System.out.println(left + " > " + right);
        if(midVal.compareToIgnoreCase(value) == 0){
            // Found
            return mid;
        } 
        else if (left == right){
            // Not found
            return -1;
        }
        else if (midVal.compareToIgnoreCase(value) > 0){
            return binarySearch(value, left, mid);
        } 
        else {
            if(mid == left) mid++; // to stop loops caused by integer rounding
            return binarySearch(value, mid, right);
        }
    }
    
    /**
     * Uses binary search algorithm to find the array index of Floating value
     * @param value The value to find
     * @param left left most index to check
     * @param right right most index to check
     * @return index of value; -1 if not found
     */
    private int binarySearch(Float value, int left, int right) {
        int mid = (left + right) / 2;
        Float midVal = Float.parseFloat(sortedData.get(mid)[sortCol].toString());
        System.out.println(left + " > " + right);
        if(Objects.equals(midVal, value)){
            // Found
            return mid;
        } 
        else if (left == right){
            // Not found
            return -1;
        }
        else if (midVal < value){
            return binarySearch(value, left, mid);
        } 
        else {
            if(mid == left) mid++; // to stop loops caused by integer rounding
            return binarySearch(value, mid, right);
        }
    }

    /**
     * Used to display arraylist in console
     */
    private void testDisplaySortedArray() {
        for(Object[] row: sortedData){
            for(Object item: row){
                System.out.print(item+"\t\t\t");
            }
            System.out.println();
        }
        System.out.println();
    }

    /**
     * Opens the help manual
     */
    private void helpMenu() {
        if (Desktop.isDesktopSupported()) {
            try {
                File myFile = new File("src/TVIS/doc/help0.pdf");
                Desktop.getDesktop().open(myFile);
            } catch (IOException ex) {
                Logger.error("Help document missing. Please check the included manual for help.");
            }
        }
    }

    /**
     * Shows the About information
     */
    private void aboutMenu() {
        String info = 
            "This software was developed for our coursework of \"Emerging Programming Platform and Technologies\".\n" +
            "It was prepared by:\n" +
            "1. Rajiv Luitel";
        Logger.info(info);
    }
    
}
